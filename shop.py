import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.filters import Text
from aiogram import types
from bs4 import BeautifulSoup
import requests
from aiogram.types import FSInputFile
from aiogram.types import URLInputFile
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton
from aiogram.methods.send_animation import SendAnimation
from aiogram.methods import SendAnimation
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
import random
from pyqiwip2p import QiwiP2P
from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime, PaymentMethods
from datetime import datetime, date, time
from datetime import timedelta
import psycopg2
from psycopg2 import Error
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import re
import keyboards_shop as kb
import config_shop as config
import db_config as db
import traceback
import time
from apscheduler.schedulers.asyncio import AsyncIOScheduler

scheduler = AsyncIOScheduler()

QIWI_PRIV_KEY = config.qiwi_token

p2p = QiwiP2P(auth_key=QIWI_PRIV_KEY)

balance_chanel_id=config.balance
pokupka_chanel_id=config.pokupka
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token, parse_mode='html')
dp = Dispatcher()
conn= psycopg2.connect(user=db.user,
                                  # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                                  password=db.password,
                                  host=db.host,
                                  port=db.port,
                                  database=db.database)
    # –ö—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
cur = conn.cursor()
image = URLInputFile(
    config.image_link,
    filename=config.image_name
    )
class JobUser(StatesGroup):
    cat2=State()
    job = State() 
    kod=State()
    but=State()
    qiwi=State()
    proverka=State()
    podcat=State()
    rass=State()
    popolid=State()
    mesid=State()
    mesmes=State()
    proverpodpis=State()

class AdBalance(StatesGroup):
	ad_balance = State() 
class AdPromoMoney(StatesGroup):
	ad_promo_money = State() 
class AdPromoTovar(StatesGroup):
	ad_promo_tovar = State() 
class AdFortuna(StatesGroup):
	fortuna = State() 
cur.execute("""CREATE TABLE IF NOT EXISTS users(
	id TEXT PRIMARY KEY,
	balance INT,
	referer TEXT);
""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS referals(
	id TEXT PRIMARY KEY,
	referer TEXT);
""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS fortuna(
	id TEXT,
	data TEXT);
""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS skidka(
	id TEXT,
	skidka TEXT);
""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS pokupki(
		id TEXT,
		name_pokupka TEXT,
		tovar TEXT,
		summa TEXT,
		data TEXT);
		""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS popolneniya(
		id TEXT,
		id_platech TEXT,
		summa TEXT,
		data TEXT);
		""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS zarabotok(
			id_referera TEXT,
			id_referala TEXT,
			dohod TEXT,
			data TEXT,
			opisanie TEXT);
			""")
conn.commit()

cur.execute("""CREATE TABLE IF NOT EXISTS qiwi(
		id TEXT,
		balik TEXT,
		bils TEXT,
		new_bill TEXT,
		status TEXT,
		url_check TEXT);
		""")
conn.commit()
def toFixed(numObj, digits=0):
    return f"{numObj:.{digits}f}"
async def proveka_platezhek(dp: Dispatcher):
	cur.execute('SELECT * FROM qiwi')
	info_pay=cur.fetchall()
	if len(info_pay)>0:
		for i in range(len(info_pay)):
			print('–ï—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∫–∞ –æ—Ç: ' + info_pay[i][0])
			balik=info_pay[i][1]
			bils=info_pay[i][2]
			url_check=info_pay[i][5]
			if len(info_pay)>0:
				status=p2p.check(bill_id=bils).status
				print(status)
				if status =='PAID':
					print(status)
					cur.execute('SELECT * FROM users WHERE id = %s', (str(info_pay[i][0]), ))
					user_info = cur.fetchone()
					conn.commit()
					bal=user_info[1]
					bal=float(user_info[1])
					bal=float(bal)+int(balik)
					us_b=(info_pay[i][0],bal)
					sql = """UPDATE users SET balance = %s WHERE id = %s"""
					cur.execute(sql, (float(bal),str(info_pay[i][0])))
					conn.commit()
					data_popolneniya=datetime.now()
					popolneniya_info=(str(user_ids),str(bils),str(balik),str(data_popolneniya))
					await bot.send_message(info_pay[i][0],'<b>‚ûï –í–∏–∂—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É:</b> ' + str(balik) + '\n\nüí∞‚Äã <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> '+ str(toFixed(bal,2))+'\n\n<em>üòé –ó–∞ –ø–æ–∫—É–ø–∫–∞–º–∏?</em>')
					cur.execute('INSERT INTO popolneniya VALUES (%s, %s, %s, %s)', popolneniya_info)
					conn.commit()
					await bot.send_message(balance_chanel_id,'<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ‚úÖ</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n<b>üîê ID</b>: '+str(info_pay[i][0])+'\n<b>‚öô ID –ø–ª–∞—Ç–µ–∂–∞:</b> '+str(bils)+'\n<b>üí∞‚Äã–°—É–º–º–∞:</b> '+str(balik)+' —Ä—É–±.')
					cur.execute('DELETE FROM qiwi WHERE bils = %s', (str(info_pay[i][2]),))
					conn.commit()
					
					print(status)
				if status == 'EXPIRED':
					await bot.send_message(info_pay[i][0],'<b>‚ùå –ü–ª–∞—Ç—ë–∂ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: </b>'+str(bils)+' –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. \n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <em>–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ–ø–ª–∞—Ç–∏—Ç—å.</em>')
					cur.execute('DELETE FROM qiwi WHERE bils = %s', (str(info_pay[i][2]),))
					conn.commit()
		
	else:		
		print('–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–∫')
scheduler.add_job(proveka_platezhek, "interval", seconds=10, args=(dp,))


@dp.message(Command(commands=["start"]))
async def command_start_handler(message: Message, state: FSMContext) -> None:
	try:
		users1=((str(message.from_user.id)),('1'),('no referer'))
		cur.execute("INSERT INTO users VALUES (%s, %s, %s)ON CONFLICT  (id) DO NOTHING", users1)
		conn.commit()
		user_channel_status = await bot.get_chat_member(chat_id=config.channel_popdiska, user_id=message.chat.id)
		user_channel_status = re.findall(r"\w*", str(user_channel_status))
		print(user_channel_status[3])
		if user_channel_status[3] == 'left':
			def get_keyboard1():
				buttons1 = [
				[
					types.InlineKeyboardButton(text="üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="popdisatsa", url='https://t.me/gandalf_news')
				],
				[
					types.InlineKeyboardButton(text="‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="proveritpodpis")
				],
				]
				keyboard1 = types.InlineKeyboardMarkup(inline_keyboard=buttons1)
				return keyboard1

			await message.answer('<b>ü´µ –¢—ã –Ω–µ –ø—Ä–æ–π–¥–µ—à—å!</b> \n\n<em>(–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª)</em>\n\n<b>üö™ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –¥–≤–µ—Ä–∏ –≤ –ª–∞–≤–∫—É –ì—ç–Ω–¥–∞–ª—å—Ñ–∞ –æ—Ç–∫—Ä–æ—é—Ç—Å—è</b>',reply_markup=get_keyboard1())  #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
			await state.set_state(JobUser.proverpodpis)
		else:
			cur.execute('SELECT * FROM skidka WHERE id = %s', (str(message.from_user.id), ))
			user_skidka_info=cur.fetchone()
			conn.commit()
			await bot.send_photo(message.from_user.id, image, caption="<b>üè† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!\n\nüßô –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ª–∞–≤–∫–µ –ì—ç–Ω–¥–∞–ª—å—Ñ–∞</b>\n\nüóÉÔ∏è –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ!\n\n <b>üòé –ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—è. </b>\n\n<b>ü§´ –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. </b>", reply_markup=kb.keyboard_inital,  parse_mode="html")
			if user_skidka_info!=None:
				await message.answer('<b>‚ùó –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ —Å–∫–∏–¥–∫–∞ </b>'+'<pre>'+user_skidka_info[1]+' –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ '+'</pre>'+'<b>–Ω–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É</b>')
	except:
		await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))	

	@dp.callback_query(state=JobUser.proverpodpis)
	async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext):
		try:
			print(1)
			if callback_query.data=='proveritpodpis':
				user_channel_status = await bot.get_chat_member(chat_id=config.channel_popdiska, user_id=callback_query.from_user.id)
				user_channel_status = re.findall(r"\w*", str(user_channel_status))
				print(user_channel_status[3])
				if user_channel_status[3] == 'left':
					await bot.send_message(callback_query.from_user.id, '‚ùå <b>–¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è</b>')  #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
					await callback_query.answer()
				else:
					cur.execute('SELECT * FROM skidka WHERE id = %s', (str(callback_query.from_user.id), ))
					user_skidka_info=cur.fetchone()
					conn.commit()
					await bot.send_photo(callback_query.from_user.id, image, caption="<b>üè† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!\n\nüßô –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ª–∞–≤–∫–µ –ì—ç–Ω–¥–∞–ª—å—Ñ–∞</b>\n\nüóÉÔ∏è –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ!\n\n <b>üòé –ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—è. </b>\n\n<b>ü§´ –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. </b>", reply_markup=kb.keyboard_inital,  parse_mode="html")
					if user_skidka_info!=None:
						await message.answer('<b>‚ùó –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ —Å–∫–∏–¥–∫–∞ </b>'+'<pre>'+user_skidka_info[1]+' –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ '+'</pre>'+'<b>–Ω–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É</b>')
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(callback_query.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(callback_query.from_user.username)+'</pre>'))	
	try:
		user_id = message.from_user.id
		referrer = None
		if " " in message.text:
			user_id=str(user_id)
			referrer_candidate = message.text.split()[1]
			cur.execute('SELECT * FROM users WHERE id = %s', (user_id, ))
			referer_results = cur.fetchone()
			print(len(referer_results))
			if referer_results[2]=='no referer' and str(referrer_candidate)!=str(message.from_user.id):
				datas=datetime.now()
				refererals_add_table=((str(message.from_user.id,),str(referrer_candidate)))
				zar='5'
				opisan='–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É'
				zarobotok_table=(str(referrer_candidate),str(message.from_user.id),zar,str(datas),opisan)
				sql2 = """UPDATE users SET referer = %s WHERE id = %s"""
				cur.execute(sql2, (referrer_candidate,user_id))
				conn.commit()
				cur.execute('INSERT into referals VALUES (%s, %s)', refererals_add_table)
				conn.commit()
				cur.execute('INSERT into zarabotok VALUES (%s, %s, %s, %s, %s)', zarobotok_table)
				conn.commit()
				cur.execute('SELECT * FROM users WHERE id = %s', (str(referrer_candidate), ))
				balanceinfo=cur.fetchone()
				conn.commit()
				raznica=float(balanceinfo[1]) + 5
				sql = """UPDATE users SET balance = %s WHERE id = %s"""
				cur.execute(sql, (raznica,referrer_candidate))
				conn.commit()
				await bot.send_message(referrer_candidate, ('<b>‚ûï –ö –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª —Å ID:' +str(message.from_user.id)+'</b>\n\n<b>üí∞ –ù–∞ –≤–∞—à —Å—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ 5 —Ä—É–±–ª–µ–π</b>'))
				await message.answer('<b>üë§ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: </b>'+str(referrer_candidate))
	except:
		await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'))	
	user_ids=message.from_user.id
	conn.commit()

	async def send_message(channel_id: int, text: str):
		await bot.send_message(channel_id, text)
		return await state.set_state(JobUser.cat2)
	
	@dp.message(Text(text="üìñ –õ–∞–≤–∫–∞", state=JobUser.cat2))
	async def get_text_messages(message: types.Message, state: FSMContext):
		try:
			await state.update_data(jobs=message.text)
			user_ids=message.from_user.id
			print('–í–æ—Ç ID: '+ str(user_ids))
			cur.execute("SELECT * FROM product;")
			all_results = cur.fetchall()
			kol=len(all_results)
			cat=[]
			for i in range(kol):
				print(all_results[i][1])
				cat1=all_results[i][1]
				cat.append(cat1)
			ints_list1 = list(set(cat))
			print(ints_list1)

			kolvo=len(ints_list1)
			markup =InlineKeyboardBuilder() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			markup.row(width=1)
			menu=markup.add(*[InlineKeyboardButton(text=ints_list1[x], callback_data=str(ints_list1[x])) for x in range(kolvo)]) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞	
			global markup_glav
			markup_glav= menu.adjust(2).as_markup()
			msg = await message.answer('üìñ <b>–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>', reply_markup=markup_glav)
			await state.clear()
			return await state.set_state(JobUser.kod)
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))
	
	@dp.callback_query(state=JobUser.kod)
	async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext):
		try:		
			await callback_query.message.delete()
			cur.execute('SELECT * FROM product WHERE category = %s', (callback_query.data, ))
			all_results = cur.fetchall()
			kol=len(all_results)
			cat=[]
			for i in range(kol):
				print(all_results[i][2])
				cat1=all_results[i][2]
				cat.append(cat1)
			ints_list1 = list(set(cat))
			kolvo=len(ints_list1)
			print('–í–æ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'+str(ints_list1))
			user_ids=callback_query.from_user.id
			print('–í–æ—Ç ID: '+ str(user_ids))
			cur.execute('SELECT * FROM product WHERE category = %s', (callback_query.data, ))
			tovarinfo=cur.fetchall()
			print(tovarinfo)
			kolvo2=len(tovarinfo)
			global markuppodcat
			markuppodcat =InlineKeyboardBuilder() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			menu2=markuppodcat.add(*[InlineKeyboardButton(text=ints_list1[x], callback_data=str(ints_list1[x])) for x in range(kolvo)]) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞	
			menu2=(markuppodcat.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='nazad')))	
			markuppodcat= menu2.adjust(2).as_markup()
			keyboard2 = InlineKeyboardBuilder.as_markup(menu2)
			msg1 = await callback_query.message.answer('üìñ <b>–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>', reply_markup=markuppodcat)
			await callback_query.answer()
			await state.clear()
			return await state.set_state(JobUser.podcat)
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(callback_query.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(callback_query.from_user.username)+'</pre>'))	
	@dp.callback_query(state=JobUser.podcat)
	async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext):
		try:
			await callback_query.message.delete()
			if callback_query.data=='nazad':
				await callback_query.message.answer('üìñ <b>–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>', reply_markup=markup_glav)
				return await state.set_state(JobUser.kod)
			print('–í–æ—Ç ID: '+ str(user_ids))
			cur.execute('SELECT * FROM product WHERE podcategory = %s', (callback_query.data, ))
			tovarinfo = cur.fetchall()
			print(tovarinfo)
			kolvo2=len(tovarinfo)
			global markuptovar
			markuptovar =InlineKeyboardBuilder() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			menu2=markuptovar.add(*[InlineKeyboardButton(text=tovarinfo[x][3], callback_data=str(tovarinfo[x][0])) for x in range(kolvo2)]) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞	
			menu2=(markuptovar.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='nazad')))
			markuptovar= menu2.adjust(1).as_markup()
			keyboard2 = InlineKeyboardBuilder.as_markup(menu2)
			msg1 = await callback_query.message.answer('üìñ <b>–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:</b>', reply_markup=markuptovar)
			await callback_query.answer()
			await state.clear()
			return await state.set_state(JobUser.job)
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(callback_query.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(callback_query.from_user.username)+'</pre>'))	

	@dp.callback_query(state=JobUser.job)
	async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext):
		try:	
			await state.update_data(jobs=callback_query.data)
			user_ids=callback_query.from_user.id
			if callback_query.data=='nazad':
				await callback_query.message.answer('üìñ <b>–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:</b>', reply_markup=markuppodcat)
				return await state.set_state(JobUser.podcat)
			print('–í–æ—Ç ID: '+ str(user_ids))
			cur.execute('SELECT * FROM product WHERE id = %s', (str(callback_query.data), ))
			tovarinfo1 = cur.fetchone()
			print(callback_query.data)
			print(tovarinfo1)
			markup_buy =InlineKeyboardBuilder() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			cur.execute('SELECT * FROM product_remains WHERE id = %s', (str(tovarinfo1[0]), ))
			tovary5= cur.fetchall()
			cena_tovara=float(tovarinfo1[5])
			cur.execute('SELECT * FROM skidka WHERE id = %s', (str(callback_query.from_user.id), ))
			user_skidka_info=cur.fetchone()
			conn.commit()
			if user_skidka_info!=None:
				skidka_na_tovar=float(user_skidka_info[1])
				raz_cena_tovara=(cena_tovara/100)*skidka_na_tovar
				cena_tovara=cena_tovara-raz_cena_tovara
				kolvo_tovarov=(len(tovary5))
				button_buy=markup_buy.add(InlineKeyboardButton(text='üí∞‚Äã –°–æ —Å–∫–∏–¥–∫–æ–π | '+str(toFixed(cena_tovara,2))+' —Ä—É–±–ª–µ–π | –ù–∞–ª–∏—á–∏–µ: '+str(kolvo_tovarov)+' —à—Ç.', callback_data=str(tovarinfo1[0])))#–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞	
			else:
				kolvo_tovarov=(len(tovary5))
				button_buy=markup_buy.add(InlineKeyboardButton(text='üí∞‚Äã –ö—É–ø–∏—Ç—å | '+str(cena_tovara)+' —Ä—É–±–ª–µ–π | –ù–∞–ª–∏—á–∏–µ: '+str(kolvo_tovarov)+' —à—Ç.', callback_data=str(tovarinfo1[0])))#–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞	
			
			if len(tovary5)==0:
				await callback_query.message.answer('<b>üòû –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n<em>–ù–æ –º—ã —É–∂–µ –∑–Ω–∞–µ–º –æ–± —ç—Ç–æ–º –∏ —Å–∫–æ—Ä–æ –ø–æ–ø–æ–ª–Ω–∏–º –∑–∞–ø–∞—Å—ã</em> üòé')
				await callback_query.answer()
				await state.clear()
				return await state.set_state(JobUser.job)
			if len(tovary5)>0:
				buy_kb= button_buy.adjust(1).as_markup()
				await callback_query.message.answer(f'<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tovarinfo1[3]}\n\n<b>‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b>{tovarinfo1[4]}',reply_markup=buy_kb)
				await callback_query.answer()
				await state.clear()
				return await state.set_state(JobUser.but)
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(callback_query.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(callback_query.from_user.username)+'</pre>'))	
	
	@dp.callback_query(state=JobUser.but)
	async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext):
		try:
			await state.update_data(jobs=callback_query.data)

			cur.execute('SELECT * FROM skidka WHERE id = %s', (str(callback_query.from_user.id), ))
			user_skidka_info=cur.fetchone()
			conn.commit()
			user_ids=callback_query.from_user.id
			print('–í–æ—Ç ID: '+ str(user_ids))
			cur.execute('SELECT * FROM product WHERE id = %s', (str(callback_query.data), ))
			tovarinfo1 = cur.fetchone()
			conn.commit()
			cena_tovara=float(tovarinfo1[5])
			if user_skidka_info!=None:
				skidka_na_tovar=float(user_skidka_info[1])
				raz_cena_tovara=(cena_tovara/100)*skidka_na_tovar
				cena=cena_tovara-raz_cena_tovara
				cur.execute('DELETE FROM skidka WHERE id = %s', (str(callback_query.from_user.id),))
				conn.commit()
			else:
				cena=tovarinfo1[5]
			print('–í–æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: '+ str(cena))
			cur.execute('SELECT * FROM users WHERE id = %s', (str(user_ids), ))
			balanceinfo=cur.fetchone()
			conn.commit()
			print('–í–æ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '+str(balanceinfo[1]))
			cur.execute('SELECT * FROM product_remains WHERE id = %s', (str(tovarinfo1[0]), ))

			tovary= cur.fetchone()
			print(tovary)
			print(len(tovary))
			datas=datetime.now()
			if float(balanceinfo[1]) >= float(cena):
				print(float(balanceinfo[1]) - float(cena))
				raznica=float(balanceinfo[1]) - float(cena)
				sql = """UPDATE users SET balance = %s WHERE id = %s"""
				cur.execute(sql, (raznica,str(user_ids)))
				conn.commit()
				tovik=str(tovary[1])
				print(tovik)
				await callback_query.message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>\n\nüì¶ <b>–í–æ—Ç —Ç–æ–≤–∞—Ä:</b>\n'+'<pre>'+tovik+'</pre>'+'\n\n<b>üí∞‚Äã –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: </b>'+str(raznica))
				await callback_query.message.answer('üßô –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ—Ç —Ç–∞–∫–∏—Ö —á—É–¥–µ—Å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–∞–∫ –≤—ã –ø–æ–º–æ–≥–∞—é—Ç –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ <b>Gandalf store</b>. \n\n–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 60 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã <b>–Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —É—Å–ø–µ—à–Ω—ã–º –æ–ø—ã—Ç–æ–º?</b> ',reply_markup=kb.get_otzyv())
				cur.execute('DELETE FROM product_remains WHERE product = %s', (str(tovary[1]),))
				conn.commit()
				pokupka_info=((user_ids),(tovarinfo1[3]),(str(tovary[0])),(cena),(str(datas)))
				print(pokupka_info)
				cur.execute('INSERT INTO pokupki VALUES (%s, %s, %s, %s, %s)', pokupka_info)
				conn.commit()
				cur.execute('SELECT * FROM users WHERE id = %s', (str(callback_query.from_user.id), ))
				referer_info=cur.fetchone()
				conn.commit()
				if referer_info[2]!='no referer':
					cur.execute('SELECT * FROM referals WHERE referer = %s', (str(referer_info[2]), ))
					referals_results = cur.fetchall()
					conn.commit()
					if len(referals_results)>0:
						cur.execute('SELECT * FROM referals WHERE referer = %s', (str(callback_query.from_user.id), ))
						referals_results = cur.fetchall()
						conn.commit()
						coef=1
						if len(referals_results)>0 and len(referals_results)<20:
							coef=10
						if len(referals_results)>20 and len(referals_results)<40:
							coef=11
						if len(referals_results)>40:
							coef=12
						sum_dohoda=int(cena)/10
						sum_dohoda=sum_dohoda*coef
						print(sum_dohoda+int(cena))
						sum_dohoda=toFixed(sum_dohoda, 2)
						print('–°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: '+ str(sum_dohoda))
						cur.execute('SELECT * FROM users WHERE id = %s', (str(callback_query.from_user.id), ))
						referer_info=cur.fetchone()
						conn.commit()
						cur.execute('SELECT * FROM users WHERE id = %s', (str(referer_info[2]), ))
						balanceinfo2=cur.fetchone()
						conn.commit()
						print(1)
						raznica=float(balanceinfo2[1]) + float(sum_dohoda)
						sql = """UPDATE users SET balance = %s WHERE id = %s"""
						print(2)
						cur.execute(sql, (raznica,referer_info[2]))
						conn.commit()
						zar=sum_dohoda
						print(3)
						opisan='–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞'
						zarobotok_table=(str(referer_info[2]),str(message.from_user.id),zar,str(datas),opisan)
						print(4)
						cur.execute('INSERT INTO zarabotok VALUES (%s, %s, %s, %s, %s)', zarobotok_table)
						conn.commit()
						await bot.send_message(referer_info[2],'<b>‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –ø–æ–∫—É–ø–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å ID:</b> '+str(callback_query.from_user.id)+'\n<b>üí≤ –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b> '+str(sum_dohoda)+' —Ä—É–±.'+'\n<b>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> '+str(toFixed(raznica,2))+' —Ä—É–±.')
				if user_skidka_info!=None:
					cur.execute('DELETE FROM skidka WHERE id = %s', (str(callback_query.from_user.id),))
					conn.commit()

				print('–¢–æ–≤–∞—Ä —É–¥–∞–ª–∏–ª')
				await bot.send_message(pokupka_chanel_id,'<b>–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ ‚úÖ</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n<b>üîê ID</b>: '+str(callback_query.from_user.id)+'\n<b>‚öô –õ–æ–≥–∏–Ω:</b> '+str(callback_query.from_user.username)+'\n<b>üì¶ –¢–æ–≤–∞—Ä:</b> '+tovarinfo1[3]+'\n<b>üí∞‚Äã–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> '+str(cena)+' —Ä—É–±.')
				await callback_query.answer()
				await state.clear()
			if float(balanceinfo[1]) < float(cena):
				await callback_query.message.answer('‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ</b> \n\n<b>üí∞‚Äã –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:</b>',reply_markup=kb.keyboard_balance)
				await bot.send_message(pokupka_chanel_id,'<b>–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ ‚ùå</b>\n\n<b>–ù–µ —Ö–≤–∞—Ç–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n<b>üîê ID</b>: '+str(callback_query.from_user.id)+'\n<b>‚öô –õ–æ–≥–∏–Ω:</b> '+str(callback_query.from_user.username)+'\n<b>üì¶ –¢–æ–≤–∞—Ä:</b> '+tovarinfo1[3]+'\n<b>üí∞‚Äã–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> '+str(cena)+' —Ä—É–±.')
				await callback_query.answer()
				await state.clear()
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(callback_query.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(callback_query.from_user.username)+'</pre>'))			
	
	@dp.message(Text(text="üí∞ –ë–∞–ª–∞–Ω—Å"))
	async def get_text_messages(message: types.Message):
		try:
			user_ids=message.from_user.id
			print('–í–æ—Ç ID: '+ str(user_ids))
			cur.execute('SELECT * FROM users WHERE id = %s', (str(user_ids), ))
			user_info=cur.fetchone()
			conn.commit()
			print(user_info)
			bal=user_info[1]
			print(bal)
			await message.answer('‚öô <b>–í–∞—à ID:</b> '+user_info[0] + '\n\nüí∞‚Äã <b>–ë–∞–ª–∞–Ω—Å:</b> '+str(bal) + '  —Ä—É–±.', reply_markup=kb.keyboard_balance)
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ -–ë–∞–ª–∞–Ω—Å-‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))	
	@dp.message(Text(text="üîô –ù–∞–∑–∞–¥"))
	async def get_text_messages(message: types.Message):
		await bot.send_photo(message.from_user.id, image, caption="<b>üè† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!\n\nüßô –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ª–∞–≤–∫–µ –ì—ç–Ω–¥–∞–ª—å—Ñ–∞</b>\n\nüóÉÔ∏è –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ!\n\n <b>üòé –ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—è. </b>\n\n<b>ü§´ –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. </b>", reply_markup=kb.keyboard_inital,  parse_mode="html")
	
	@dp.message(Text(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
	async def get_text_messages(message: types.Message):
		try:
			cur.execute('SELECT * FROM pokupki WHERE id = %s', (str(message.from_user.id), ))
			pokupki=cur.fetchall()
			conn.commit()
			cur.execute('SELECT * FROM zarabotok WHERE id_referera = %s', (str(message.from_user.id), ))
			zarabotok_result = cur.fetchall()
			conn.commit()
			zar=0
			cur.execute('SELECT * FROM users WHERE id = %s', (str(message.from_user.id), ))
			referer_results = cur.fetchone()
			conn.commit()
			cur.execute('SELECT * FROM referals WHERE referer = %s', (str(message.from_user.id), ))
			referals_results = cur.fetchall()
			conn.commit()
			referer_tvoy='–Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞'
			if referer_results!='no referer':
				referer_tvoy=str(referer_results[2])
			if len(zarabotok_result)>0:
				for i in range(len(zarabotok_result)):
					zar=zar+float(zarabotok_result[i][2])
			kolvo_pokupok=str(len(pokupki))
			print(kolvo_pokupok)
			await message.answer("<b>‚öô ID:</b>"+str(message.from_user.id)+'\n\n<b>üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫:</b> '+kolvo_pokupok+'\n\n<b>üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä: </b>'+str(referer_tvoy)+'\n\n<b>üë• –£ –≤–∞—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: </b>'+str(len(referals_results))+'\n\n<b>üí≤ –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> '+str(toFixed(zar,2))+' —Ä—É–±.', reply_markup=kb.keyboard_profil,  parse_mode="html")
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ -–ü—Ä–æ—Ñ–∏–ª—å-‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))		
	@dp.message(Text(text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>ü§î –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</b>',reply_markup=kb.keyboard_referals)

	@dp.message(Text(text="üí∞ –î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"))
	async def get_text_messages(message: types.Message):
		try:
			cur.execute('SELECT * FROM zarabotok WHERE id_referera = %s', (str(message.from_user.id), ))
			zarabotok_result = cur.fetchall()
			conn.commit()
			if len(zarabotok_result)==0:
				await message.answer('<b>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üòû</b>')
			if len(zarabotok_result)>=1:
				for i in range(len(zarabotok_result)):
					vremya=zarabotok_result[i][3]
					await message.answer('<b>üë§ –†–µ—Ñ–µ—Ä–∞–ª c ID: </b>'+zarabotok_result[i][1]+'\n<b>üí≤–ü—Ä–∏–Ω—ë—Å –≤–∞–º: </b> '+zarabotok_result[i][2]+' —Ä—É–±.'+'<b>\nüìÖ –í —ç—Ç–æ –≤—Ä–µ–º—è:</b> '+vremya[:-7]+'\n<b>üì≤ –ó–∞ –¥–µ–π—Å—Ç–≤–∏–µ: </b>'+zarabotok_result[i][4])
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ -–î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤-‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))				
	@dp.message(Text(text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"))
	async def get_text_messages(message: types.Message):
		try:
			cur.execute('SELECT * FROM referals WHERE referer = %s', (str(message.from_user.id), ))
			referals= cur.fetchall()
			conn.commit()
			if len(referals)==0:
				await message.answer('<b>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üòû</b>')
			if len(referals)>=1:
				for i in range(len(referals)):
					vremya=referals[i][1]
					await message.answer('<b>üë§ –†–µ—Ñ–µ—Ä–∞–ª ‚Ññ</b>'+str(i+1)+'<b>\n‚öô ID:</b> '+'<pre>'+referals[i][0]+'</pre>')
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ -–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤-‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))				
	
	@dp.message(Text(text="üõí –ü–æ–∫—É–ø–∫–∏"))
	async def get_text_messages(message: types.Message):
		try:
			cur.execute('SELECT * FROM pokupki WHERE id = %s', (str(message.from_user.id), ))
			pokupki=cur.fetchall()
			conn.commit()
			kolvo_pokupok=str(len(pokupki))
			if int(kolvo_pokupok)==0:
				await message.answer('<b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç üòû</b>')
			if int(kolvo_pokupok)>=1:
				for i in range(int(kolvo_pokupok)):
					vremya=pokupki[i][4]
					await message.answer('üì¶ <b>–ü–æ–∫—É–ø–∫–∞ ‚Ññ</b>'+str(i+1)+'\nüìù <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> '+pokupki[i][1]+'\nüìÉ <b>–¢–æ–≤–∞—Ä:</b> \n\n'+pokupki[i][2]+'\n\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> '+pokupki[i][3]+' —Ä—É–±.'+'\nüìÖ <b>–î–∞—Ç–∞:</b> '+vremya[:-7])
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ -–ü–æ–∫—É–ø–∫–∏-‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))	
	@dp.message(Text(text="üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è"))
	async def get_text_messages(message: types.Message):
		try:
			cur.execute('SELECT * FROM popolneniya WHERE id = %s', (str(message.from_user.id), ))
			popolnen= cur.fetchall()
			conn.commit()
			kolvo_popolnen=str(len(popolnen))
			if int(kolvo_popolnen)==0:
				await message.answer('<b>–°–ø–∏—Å–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø—É—Å—Ç üòû</b>')
			if int(kolvo_popolnen)>=1:
				for i in range(int(kolvo_popolnen)):
					vremya=popolnen[i][3]
					await message.answer('üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Ññ</b>'+str(i+1)+'\n\n‚öô <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> '+popolnen[i][1]+'\nüí∞ <b>–°—É–º–º–∞:</b> '+popolnen[i][2]+' —Ä—É–±.'+'\nüìÖ <b>–î–∞—Ç–∞:</b> '+vremya[:-7])
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ -–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è-‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))	

	@dp.message(Text(text="‚ö†Ô∏è –ü–æ–º–æ—â—å"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>‚ö†Ô∏è –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–±—Ä–∞–Ω—ã —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.</b>',reply_markup=kb.get_help())
	
	@dp.message(Text(text="üìñ –û—Ç–∑—ã–≤—ã"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>üìñ –û –Ω–∞—Å –ø–∏—à—É—Ç —Ç—É—Ç: \n </b>'+config.otzyv_channel)

	@dp.message(Text(text="üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>üìß –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º \n\n–ü–∏—à–∏ –µ–º—É: </b>'+config.techpod)

	@dp.message(Text(text="üéÅ –ê–∫—Ü–∏–∏"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>üòû –î–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>')

	@dp.message(Text(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
	async def get_text_messages(message: types.Message, state: FSMContext):
		user_ids=message.from_user.id
		print('–í–æ—Ç ID: '+ str(user_ids))
		await message.answer('<b>üí∞ –ö–∞–∫—É—é —Å—É–º–º—É –±—É–¥–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å?</b>\n\n<b>–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> 1 —Ä—É–±.\n<b>–ú–∞–∫—Å. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> 9999 —Ä—É–±.\n\n<b>‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤–≤–µ–¥–∏</b> "<pre>stop</pre>"',reply_markup=kb.keyboard_nazadpopol)
		await state.set_state(AdBalance.ad_balance)
	
	@dp.message(Text(text="‚ñ∂Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>‚ùó –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ</b>',reply_markup=kb.keyboard_all)

	@dp.message(state=AdBalance.ad_balance)
	async def ad_category_text(message: types.Message, state: FSMContext):
		try:
			await state.update_data(ad_balance=message.text)
			if message.text=='stop':
				await bot.send_photo(message.from_user.id, image, caption="<b>üè† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!\n\nüßô –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ª–∞–≤–∫–µ –ì—ç–Ω–¥–∞–ª—å—Ñ–∞</b>\n\nüóÉÔ∏è –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ!\n\n <b>üòé –ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—è. </b>\n\n<b>ü§´ –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. </b>", reply_markup=kb.keyboard_inital,  parse_mode="html")
				return await state.clear()
			if message.text.isdigit()==True:
				if int(message.text)>0 and int(message.text)<10000 :
					user_ids=message.from_user.id
					print('–í–æ—Ç ID: '+ str(user_ids))
					
					balik=int(message.text)
					
					bils=random.randint(1, 100000)
					
					new_bill = p2p.bill(bill_id=bils, amount=balik, lifetime=15)
					print(new_bill.bill_id)
					
					status= bill_id=p2p.check(bill_id=new_bill.bill_id).status
					
					url_check=new_bill.pay_url
					qiwi_info=(str(user_ids),str(balik),str(bils),str(new_bill),str(status),str(url_check))
					print(status)
					markup_buy1 =InlineKeyboardBuilder()
					button_buy1=markup_buy1.add(InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='oplatit',url=new_bill.pay_url)) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞	
					buy_kb1= button_buy1.adjust(1).as_markup()
					await message.answer('üîó –°–æ–∑–¥–∞–ª —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. \n\n‚åö –û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç. \n\nüí≤–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á—ë—Ç.',reply_markup=buy_kb1)
					cur.execute('INSERT INTO qiwi VALUES (%s, %s, %s, %s,%s,%s)', qiwi_info)
					conn.commit()
				else:
					await message.answer('<b>‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9999</b>\n<em>–ü—Ä–∏–º–µ—Ä: </em><pre>100</pre>\n\n<b>‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤–≤–µ–¥–∏ </b>"<pre>stop</pre>"')

			if message.text.isdigit()==False:
				await message.answer('<b>‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9999</b>\n<em>–ü—Ä–∏–º–µ—Ä: </em><pre>100</pre>\n\n<b>‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤–≤–µ–¥–∏ </b>"<pre>stop</pre>"')
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))		
	
	@dp.message(Text(text="adminConstruct2$"))
	async def with_puree(message: types.Message):
		if str(message.from_user.id)=='567660912' or str(message.from_user.id)=='733672052':
			cur.execute("SELECT * FROM users;")
			all_results = cur.fetchall()
			conn.commit()
			await message.answer(('ü§ñ <b>–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω!</b> \n\n <b>üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> ' +str(len(all_results))+'\n\nüòé <em>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</em>'), reply_markup=kb.keyboard_inital_adminkb)
		else:		
			await message.answer('<b>‚òù –ù–µ–∑–≤–∞–Ω—ã–π –≥–æ—Å—Ç—å —Ö—É–∂–µ —Ç–∞—Ç–∞—Ä–∏–Ω–∞</b>')
    
	@dp.message(Text(text="üì© –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"))
	async def get_text_messages(message: types.Message, state: FSMContext):
		if str(message.from_user.id)=='567660912' or str(message.from_user.id)=='733672052':
			cur.execute("SELECT * FROM users;")
			global all_results
			all_results = cur.fetchall()
			conn.commit()
			print(all_results)
			await message.answer('–ß—Ç–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º?')
			await state.set_state(JobUser.rass)
		else:
			await message.answer('<b>‚òù –ù–µ–∑–≤–∞–Ω—ã–π –≥–æ—Å—Ç—å —Ö—É–∂–µ —Ç–∞—Ç–∞—Ä–∏–Ω–∞</b>')
	@dp.message(Text(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ ID"))
	async def get_text_messages(message: types.Message, state: FSMContext):
		if str(message.from_user.id)=='567660912' or str(message.from_user.id)=='733672052':
			await message.answer('<b>üìù –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>')
			await state.set_state(JobUser.popolid)
	
	@dp.message(state=JobUser.popolid)
	async def jobs_text(message: types.Message, state: FSMContext):
		await state.update_data(jobs=message.text)
		id_popoln=message.text.split()[0]
		sum_popoln=message.text.split()[1]
		cur.execute('SELECT * FROM users WHERE id = %s', (str(id_popoln), ))
		balanceinfo=cur.fetchone()
		conn.commit()
		raznica=float(balanceinfo[1]) + float(sum_popoln)
		sql = """UPDATE users SET balance = %s WHERE id = %s"""
		cur.execute(sql, (raznica,id_popoln))
		conn.commit()
		await message.answer('<b>‚úÖ –ü–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n‚öôÔ∏è ID: </b>'+str(id_popoln)+'<b>\n‚ûï –ù–∞ —Å—É–º–º—É: </b>'+str(sum_popoln)+' —Ä—É–±.'+'\n<b>üí∞‚Äã –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> '+str(toFixed(raznica,2))+' —Ä—É–±. ')
		await bot.send_message(id_popoln,('‚ûï <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ —Å—É–º–º—É:</b> '+str(sum_popoln)+' —Ä—É–±.'+'\nüí∞‚Äã <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> '+str(toFixed(raznica,2))+' —Ä—É–±. '))
		await state.clear() 
	
	@dp.message(Text(text="üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID"))
	async def get_text_messages(message: types.Message, state: FSMContext):
		if str(message.from_user.id)=='567660912' or str(message.from_user.id)=='733672052':
			await message.answer('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞: </b>')
			await state.set_state(JobUser.mesmes)
	
	@dp.message(state=JobUser.mesmes)
	async def get_text_messages(message: types.Message, state: FSMContext):
		await message.answer('<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: </b>')
		global id_user_sms
		id_user_sms=message.text
		await state.set_state(JobUser.mesid)

	@dp.message(state=JobUser.mesid)
	async def jobs_text(message: types.Message, state: FSMContext):
		await state.update_data(jobs=message.text)
		await message.answer('<b>‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é \n‚öôÔ∏è ID: </b>'+str(id_user_sms)+'<b>\nüìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \n</b>'+str(message.text))
		await bot.send_message(id_user_sms,('üìß <b>–í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n'+str(message.text)))
		await state.clear() 
	
	@dp.message(state=JobUser.rass)
	async def jobs_text(message: types.Message, state: FSMContext):
		await state.update_data(jobs=message.text)
		await bot.send_message(message.chat.id, f"<b>üì© –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º:</b> \n\n{message.text}\n\n<b>–ö–∞–∫ –≤—Å—ë —Å–¥–µ–ª–∞—é, –æ—Ç—á–∏—Ç–∞—é—Å—å.</b> ‚úÖ")
		for i in range(len(all_results)):
				try:
					await bot.send_message(all_results[i][0],(message.text))
					succes=succes+1
					time.sleep(1)
				except:
					failed=failed+1
					i=i+1
		await message.answer('üì© <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n\n‚úÖ<em> –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: </em>'+str(succes)+'\n\n<em>‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: </em>'+str(failed))        
		await state.clear() 
	
	@dp.message(Text(text="‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"))
	async def get_ref(message: types.Message):
		ref_baza=config.ref
		ref_link=ref_baza+str(message.from_user.id)
		await message.answer('<b>üë•–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.</b>\n\nüîó –ù–∏–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n\n<b>üåé –î–µ–ª–∏—Ç–µ—Å—å –µ—é —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏, –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–µ–Ω—å–≥–∏.</b>\n\n<em>‚ùó –£—Å–ª–æ–≤–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</em>\nüí∞ 5 —Ä—É–±. –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n‚ûï –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–æ —Å—Ö–µ–º–µ:\n\n‚ûñ –æ—Ç 0 –¥–æ 20 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 10%\n‚ûñ –æ—Ç 20 –¥–æ 40 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 11%\n‚ûñ –æ—Ç 40 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - 12%.')
		await message.answer('<b>üîó –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>' +str(ref_link))

	@dp.message(Text(text="üè∑Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã"))
	async def get_text_messages(message: types.Message):
		await message.answer('<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã –±—ã–≤–∞—é—Ç 3 —Ç–∏–ø–æ–≤: </b>\nüõçÔ∏è c–∫–∏–¥–æ—á–Ω—ã–π\nüì¶ –ø—Ä–æ–º–æ–∫–æ–¥, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ –∫–∞–∫–æ–π-—Ç–æ —Ç–æ–≤–∞—Ä\nüí≤ –¥–µ–Ω–µ–∂–Ω—ã–π. \n\n<b>–ó–∞ —á—Ç–æ –∏—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:</b> \n‚ûñ –æ—Å—Ç–∞–≤–∏—Ç—å –æ –Ω–∞—Å –æ—Ç–∑—ã–≤ \n‚ûñ –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∞–≥–∞–∑–∏–Ω–æ–º \n‚ûñ –∫–æ–Ω–∫—É—Ä—Å—ã, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ \n‚ûñ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ \n‚ûñ –∞–∫—Ü–∏–∏ –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞.',reply_markup=kb.keyboard_kupon)
	
	@dp.message(Text(text="üè∑Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"))
	async def get_text_messages(message: types.Message, state: FSMContext):
		await message.answer('üè∑Ô∏è<b> –í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥: </b>')
		await state.set_state(AdPromoMoney.ad_promo_money)

	@dp.message(state=AdPromoMoney.ad_promo_money)
	async def ad_category_text(message: types.Message, state: FSMContext):
		await state.update_data(ad_promo_money=message.text)
		try:
			if message.text[0]=='M':
				cur.execute('SELECT * FROM promocod_money WHERE promocod = %s', (str(message.text), ))
				promo_money_info=cur.fetchall()
				conn.commit()
				if len(promo_money_info)==0:
					await message.answer('<b>‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç</b>')
					await state.clear()
				if len(promo_money_info)>0:
					cur.execute('DELETE FROM promocod_money WHERE promocod = %s',(str(message.text),))
					conn.commit()
					cur.execute('SELECT * FROM users WHERE id = %s', (str(message.from_user.id), ))
					balanceinfo=cur.fetchone()
					conn.commit()
					raznica=float(balanceinfo[1]) + float(promo_money_info[0][1])
					sql = """UPDATE users SET balance = %s WHERE id = %s"""
					cur.execute(sql, (float(raznica),str(message.from_user.id)))
					conn.commit()
					await message.answer('<b>‚úì –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>'+'\n<b>üí≤ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞:</b> '+str(promo_money_info[0][1]+' —Ä—É–±.'+'\n<b>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> '+str(toFixed(raznica,2))+' —Ä—É–±.'))
					await state.clear()
				await state.clear() 
			elif message.text[0]=='T':
				cur.execute('SELECT * FROM promocod_tovar WHERE promocod = %s', (str(message.text), ))
				promo_tovar_info=cur.fetchall()
				conn.commit()
				if len(promo_tovar_info)==0:
					await message.answer('<b>‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç</b>')
					await state.clear()
				if len(promo_tovar_info)>0:
					cur.execute('DELETE FROM promocod_tovar WHERE promocod = %s',(str(message.text),))
					conn.commit()
					await message.answer('<b>‚úì –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>'+'\n<b>üì¶ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç:</b> \n'+str(promo_tovar_info[0][1]))
					await state.clear()
				await state.clear()
			elif message.text[0]=='S':
				cur.execute('SELECT * FROM promocod_skidka WHERE promocod = %s', (str(message.text), ))
				promo_skidka_info=cur.fetchall()
				conn.commit()
				if len(promo_skidka_info)==0:
					await message.answer('<b>‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç</b>')
					await state.clear()
				if len(promo_skidka_info)>0:
					
					skidka_add=((str(message.from_user.id),str(promo_skidka_info[0][1])))
					cur.execute('INSERT INTO skidka VALUES (%s, %s)', skidka_add)
					conn.commit()
					cur.execute('DELETE FROM promocod_skidka WHERE promocod = %s',(str(message.text),))
					conn.commit()
					await message.answer('<b>‚úì –°–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ:</b> '+'<pre>'+str(promo_skidka_info[0][1]) + ' –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤</pre> <b>–Ω–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</b> \n\n<em>üòé –ó–∞ –ø–æ–∫—É–ø–∫–∞–º–∏?</em>')
					await state.clear()
				await state.clear() 
			else:
				await message.answer('<b>‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç</b>')
		except:
			await bot.send_message(config.error,('<b>‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º‚ùó\n\n‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:</b> \n\n'+'<pre>'+traceback.format_exc()+'</pre>'+'\n\n<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n<em>üîê ID:</em>'+'<pre>'+str(message.from_user.id)+'</pre>'+'\n<em>‚öôÔ∏è –õ–æ–≥–∏–Ω: </em>'+'<pre>'+str(message.from_user.username)+'</pre>'))	

	@dp.message(Text(text="üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É"))
	async def get_text_messages(message: types.Message, state: FSMContext):
		await message.answer('<em>üåÑ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ —Å—Ç–æ–ª–∏—Ü—É –ø—Ä–∏–±—ã–≤–∞–ª–∞ —Å–æ—Ç–Ω—è —Å–º–µ–ª—å—á–∞–∫–æ–≤, –∂–µ–ª–∞—é—â–∏—Ö –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É. </em>\n\n<b>üé∞ –†–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ –ì—ç–Ω–¥–∞–ª—å—Ñ–∞</b>\n\nüìÅ –ü—Ä–∏–∑—ã —Ä—É–ª–µ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω–Ω—ã–µ.\n\n<b>üßô –ü–æ—ç—Ç–æ–º—É –Ω–µ –∑–∞–±—ã–≤–∞–π –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å –∫ –Ω–∞–º. </b>', reply_markup=kb.get_fortuna())
		await state.set_state(AdFortuna.fortuna)

	@dp.callback_query(state=AdFortuna.fortuna)
	async def stoptopupcall(callback_query: types.CallbackQuery, state: FSMContext): 
		cur.execute('SELECT * FROM fortuna WHERE id = %s', (str(callback_query.from_user.id), ))
		data_info=cur.fetchall()
		conn.commit()
		date_last=''
		date_now =''
		if len(data_info)>0:
			date1=data_info[-1]
			date1=date1[1]
			date1=date1[:-10]
			date_last=datetime.strptime((date1), "%Y-%m-%d %H:%M")
			date_now=datetime.now()
			date_last=date_last+timedelta(hours=24)
		if date_last<date_now or len(data_info)==0:
			print('–ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç')
			smile=['üí∞','üì¶','üè∑Ô∏è']
			light=['üî∏','üîπ']
			for i in range(random.randint(5,15)):
				try:
					sec1=smile[random.randint(0, 2)]
					sec2=smile[random.randint(0, 2)]
					sec3=smile[random.randint(0, 2)]
					await callback_query.message.edit_text('‚ïî‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïó\n'+light[random.randint(0,1)]+'<b>Gandalf fortuna</b>'+light[random.randint(0,1)]+'\n‚ïî‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïó'+'\n    '+sec1+'       '+sec2+'        '+sec3+'   \n‚ïö‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïù')
					time.sleep(0.5)
				except:
					await callback_query.message.edit_text('‚ïî‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïó\n'+light[random.randint(0,1)]+'<b>Gandalf fortuna</b>'+light[random.randint(0,1)]+'\n‚ïî‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïó'+'\n    '+smile[random.randint(0, 2)]+'        '+smile[random.randint(0, 2)]+'        '+smile[random.randint(0, 2)]+'   \n‚ïö‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïù')
			if sec1==sec2==sec3:
				if sec1=='üí∞':
					cat='money'
					cur.execute('SELECT * FROM prize_fortuna WHERE category = %s', (cat, ))
					all_results = cur.fetchall()
					conn.commit()
					cur.execute('DELETE from prize_fortuna WHERE promocod = %s', (str(all_results[-1][1]), ))
					conn.commit()
					await callback_query.message.answer('ü•≥ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> \n\n<b>üí∞ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –¥–µ–Ω—å–≥–∏.</b>\n\n'+'<pre>'+str(all_results[-1][1])+'</pre>')
				if sec1=='üì¶':
					cat='tovar'
					cur.execute('SELECT * FROM prize_fortuna WHERE category = %s', (cat, ))
					all_results = cur.fetchall()
					conn.commit()
					cur.execute('DELETE from prize_fortuna WHERE promocod = %s', (str(all_results[-1][1]), ))
					conn.commit()
					await callback_query.message.answer('ü•≥ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> \n\n<b>üì¶ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Ç–æ–≤–∞—Ä.</b>\n\n'+'<pre>'+str(all_results[-1][1])+'</pre>')

				if sec1=='üè∑Ô∏è':
					cat='skidka'
					cur.execute('SELECT * FROM prize_fortuna WHERE category = %s', (cat, ))
					all_results = cur.fetchall()
					conn.commit()
					cur.execute('DELETE from prize_fortuna WHERE promocod = %s', (str(all_results[-1][1]), ))
					conn.commit()
					await callback_query.message.answer('ü•≥ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> \n\n<b>üè∑Ô∏è –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É.</b>\n\n'+'<pre>'+str(all_results[-1][1])+'</pre>')

			else:
				await callback_query.message.answer('üòû <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ</b>', reply_markup=kb.get_fortuna())
			dt_now = datetime.now()
			fortuna_table=((str(callback_query.from_user.id,),str(dt_now)))
			cur.execute('INSERT into "fortuna" VALUES (%s, %s)', fortuna_table)
			conn.commit()
			print('–ó–∞–ø–∏—Å–∞–ª –≤ –±–∞–∑—É')
			await callback_query.answer()

		if date_last>date_now:
			ostalos_do_prokrutki=str(date_last-date_now)
			print('–î–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:',ostalos_do_prokrutki[:-4])
			await callback_query.message.answer('üòû <b>–¢–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –º–∏–Ω—É—Ç –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω.</b>\n\n<em>‚åö –î–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: </em>'+ostalos_do_prokrutki[:-4])
			await callback_query.answer()
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ
    # –î–∞, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª–ª–∏–Ω–≥
	await bot.delete_webhook(drop_pending_updates=True)
	scheduler.start()
	await dp.start_polling(bot)

if __name__ == "__main__":
	asyncio.run(main())
